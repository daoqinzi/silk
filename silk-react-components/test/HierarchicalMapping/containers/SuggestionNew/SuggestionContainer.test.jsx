import { mount, shallow } from 'enzyme';
import React from 'react';
import SuggestionContainer from '../../../../src/HierarchicalMapping/containers/SuggestionNew/SuggestionContainer';
import { render } from "@testing-library/react";

const SUGGESTIONS = [
    {
        source: 'testUri1',
        candidates: [{
            uri: 'canditate1',
            label: 'candidateLabel',
            confidence: 0
        }],
        description: 'DESCRIPTION',
        label: 'source label'
    },
    {
        source: 'testUri2',
        candidates: [{
            uri: 'canditate2',
            label: 'candidateLabel',
            _selected: false,
            _autogenerated: false,
            confidence: 0
        }],
        description: 'DESCRIPTION',
        label: 'source label'
    }
];

const props = {
    ruleId: 'root',
    targetClassUris: '',
    onAskDiscardChanges: jest.fn(),
    onClose: jest.fn()
};

const getWrapper = (renderer = shallow, args = props) => renderer(
    <SuggestionContainer {...args} />
);


jest.mock('../../../../src/HierarchicalMapping/store', () => ({
    __esModule: true,
    getSuggestionsAsync: jest.fn().mockImplementation(jest.fn().mockReturnValue({ subscribe: jest.fn()})),
    schemaExampleValuesAsync: jest.fn().mockImplementation(jest.fn().mockReturnValue({ subscribe: jest.fn()})),
    prefixesAsync: jest.fn().mockImplementation(jest.fn().mockReturnValue({ subscribe: jest.fn()})),
    generateRuleAsync: jest.fn().mockImplementation(jest.fn().mockReturnValue({ subscribe: jest.fn()})),
}));

const {getSuggestionsAsync, schemaExampleValuesAsync, prefixesAsync, generateRuleAsync } = require('../../../../src/HierarchicalMapping/store');


describe("Suggestion Container Component", () => {
    beforeEach(() => {
    
    });
    
    afterEach(() => {
        jest.resetModules();
    });
    
    it('should request suggestions, examples and prefixes on mount', () => {
        getWrapper(mount);
        expect(getSuggestionsAsync).toBeCalledWith({
            targetClassUris: props.targetClassUris,
            ruleId: props.ruleId,
            matchFromDataset: true,
            nrCandidates: 20,
        });
    
        expect(schemaExampleValuesAsync).toBeCalled();
        expect(prefixesAsync).toBeCalled();
    });
    
    it('should swap action load suggestion with reverted `matchFromDataset` value', () => {
        const wrapper = getWrapper(mount);
        const btn = wrapper.find('[data-test-id="SWAP_BUTTON"]').first()
        btn.simulate('click');
        expect(getSuggestionsAsync).toBeCalledWith({
            targetClassUris: props.targetClassUris,
            ruleId: props.ruleId,
            matchFromDataset: false,
            nrCandidates: 20,
        });
    });
    
    it('should add action works without selected items', () => {
        const wrapper = getWrapper(mount);
        const btn = wrapper.find('[data-test-id="add_button"]').first()
        btn.simulate('click');
        expect(generateRuleAsync).toBeCalledWith([], props.ruleId);
    });
    
    it('should search input filtering the values', () => {
        
        getSuggestionsAsync.mockImplementation(() => ({
            subscribe: jest.fn().mockImplementation(jest.fn().mockReturnValue({
                suggestions: SUGGESTIONS
            }))
        }));
    
        const wrapper = getWrapper(mount);
        
        const input = wrapper.find('[data-test-id="search_input"]').first();
        input.simulate('change', { target: { value: 'Hello' } });
        
        const btn  = wrapper.find('[data-test-id="find_matches"]').first();
        btn.simulate('click');
    });
});
